document.addEventListener('DOMContentLoaded', () => {
    const selectAllCheckbox = document.getElementById('selectAll');
    const noteCheckboxes = document.querySelectorAll('.note-select');
    const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
    const bulkMoveBtn = document.getElementById('bulkMoveBtn');
    const addNoteBtn = document.getElementById('addNoteBtn');
    const modal = document.getElementById('noteModal');
    const span = document.querySelector('.close');
    const form = document.getElementById('noteForm');

    // –ü–æ–ª—É—á–∞–µ–º folder_id –∏–∑ URL (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –ø—É—Ç—å –≤–∏–¥–∞ /folder/123)
    const urlParts = window.location.pathname.split('/');
    const folderId = parseInt(urlParts[urlParts.length - 1]);

    if (!folderId || isNaN(folderId)) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å folder_id –∏–∑ URL');
    }

    // === –§—É–Ω–∫—Ü–∏–∏ ===
    const updateBulkActions = () => {
        const anyChecked = Array.from(noteCheckboxes).some(cb => cb.checked);
        bulkDeleteBtn.disabled = !anyChecked;
        bulkMoveBtn.disabled = !anyChecked;
    };

    const addNoteToGrid = (note) => {
        const grid = document.getElementById('notesGrid');
        const noteCard = document.createElement('div');
        noteCard.className = 'note-card';
        noteCard.setAttribute('data-note-id', note.id);
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∫–∞–∫ –≤ —à–∞–±–ª–æ–Ω–µ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        const formattedDate = new Date(note.updated_at || new Date()).toLocaleString('ru-RU');
        noteCard.innerHTML = `
            <div class="note-checkbox">
                <input type="checkbox" class="note-select" value="${note.id}">
            </div>
            <div class="note-content">
                <h3>${note.name}</h3>
                <p class="note-date">–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${formattedDate}</p>
            </div>
        `;
        grid.appendChild(noteCard);

        // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞
        const newCheckbox = noteCard.querySelector('.note-select');
        newCheckbox.addEventListener('change', handleNoteCheckboxChange);
    };

    const handleNoteCheckboxChange = () => {
        const allChecked = Array.from(document.querySelectorAll('.note-select')).every(cb => cb.checked);
        selectAllCheckbox.checked = allChecked;
        updateBulkActions();
    };

    // === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
    selectAllCheckbox.addEventListener('change', function () {
        document.querySelectorAll('.note-select').forEach(cb => cb.checked = this.checked);
        updateBulkActions();
    });

    noteCheckboxes.forEach(cb => {
        cb.addEventListener('change', handleNoteCheckboxChange);
    });

    bulkDeleteBtn.addEventListener('click', async () => {
        const selectedIds = Array.from(document.querySelectorAll('.note-select'))
            .filter(cb => cb.checked)
            .map(cb => parseInt(cb.value));

        if (selectedIds.length === 0) return;

        if (confirm(`–£–¥–∞–ª–∏—Ç—å ${selectedIds.length} –∑–∞–º–µ—Ç–æ–∫?`)) {
            // TODO: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å DELETE-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            selectedIds.forEach(id => {
                const card = document.querySelector(`.note-card[data-note-id="${id}"]`);
                if (card) card.remove();
            });
            updateBulkActions();
        }
    });

    bulkMoveBtn.addEventListener('click', () => {
        const selectedIds = Array.from(document.querySelectorAll('.note-select'))
            .filter(cb => cb.checked)
            .map(cb => parseInt(cb.value));

        if (selectedIds.length === 0) return;

        const targetFolderId = prompt('–í–≤–µ–¥–∏—Ç–µ ID –ø–∞–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:');
        if (targetFolderId && !isNaN(targetFolderId)) {
            alert(`–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å ${selectedIds.length} –∑–∞–º–µ—Ç–æ–∫ –≤ –ø–∞–ø–∫—É ${targetFolderId}`);
            // TODO: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
        }
    });

    addNoteBtn.onclick = () => modal.style.display = 'block';
    span.onclick = () => modal.style.display = 'none';
    window.onclick = (e) => {
        if (e.target === modal) modal.style.display = 'none';
    };

    form.onsubmit = async (e) => {
        e.preventDefault();

        const name = document.getElementById('noteName').value.trim();
        const text = document.getElementById('noteText').value.trim();

        if (!name || !text) {
            alert('–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏');
            return;
        }

        const data = {
            name: name,
            text: text,
            folder_id: folderId,
            is_public: document.getElementById('notePublic').checked
        };

        try {
            // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç!
            const res = await fetch('/note/', {  // –∏–ª–∏ '/api/notes', –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ –±—ç–∫–µ–Ω–¥–∞
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });

            if (res.ok) {
                const note = await res.json();
                addNoteToGrid(note);
                modal.style.display = 'none';
                form.reset();
                // –°–±—Ä–æ—Å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                document.getElementById('notePublic').checked = false;
            } else {
                const errorText = await res.text();
                console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: ' + (res.status === 400 ? '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' : '–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞'));
            }
        } catch (err) {
            console.error('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:', err);
            alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.');
        }
    };
});